---
description: FastAPI Python project initialization and modern development patterns
globs: ["*.py", "pyproject.toml", "compose.yaml", "Dockerfile"]
alwaysApply: false
---





# FastAPI Python Project Initialization Rules

Modern **FastAPI** application setup guide using **UV package manager** and current Docker Compose standards.

## üöÄ Quick Start

```bash
# Initialize project with UV
uv init my-fastapi-app
cd my-fastapi-app

# Add FastAPI dependencies
uv add "fastapi[standard]" "uvicorn[standard]"
uv add --dev pytest pytest-asyncio httpx

# Start development server
fastapi dev app/main.py
```

## üìÅ Recommended Project Structure

```
my-fastapi-app/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ main.py              # FastAPI application entry
‚îÇ   ‚îú‚îÄ‚îÄ models.py            # Pydantic models
‚îÇ   ‚îú‚îÄ‚îÄ config.py            # Settings management
‚îÇ   ‚îú‚îÄ‚îÄ dependencies.py      # Dependency injection
‚îÇ   ‚îú‚îÄ‚îÄ routers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ items.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ users.py
‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îî‚îÄ‚îÄ database.py
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ conftest.py
‚îÇ   ‚îî‚îÄ‚îÄ test_main.py
‚îú‚îÄ‚îÄ static/                  # Static files
‚îú‚îÄ‚îÄ .env.example
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ pyproject.toml          # UV configuration
‚îú‚îÄ‚îÄ requirements.txt        # Generated by UV
‚îú‚îÄ‚îÄ compose.yaml           # Docker Compose (NO version field)
‚îú‚îÄ‚îÄ Dockerfile
‚îî‚îÄ‚îÄ README.md
```

## üõ† Core Technologies

- **Framework**: FastAPI >=0.116.0 with `[standard]` extras
- **Package Manager**: UV (not pip or poetry)
- **Server**: Uvicorn with `[standard]` extras  
- **Validation**: Pydantic v2
- **Testing**: pytest + pytest-asyncio + httpx
- **Container**: Docker with modern compose.yaml

## üìã Essential Templates

### 1. Minimal Application (`app/main.py`)
```python
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"message": "Hello World"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}
```

### 2. Production-Ready with Lifespan Events
```python
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pathlib import Path

# Global state
app_state = {}

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("Starting up...")
    app_state["initialized"] = True
    yield
    # Shutdown
    print("Shutting down...")
    app_state.clear()

app = FastAPI(
    title="Production API",
    description="A production-ready FastAPI application",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Static files
static_dir = Path("static")
if static_dir.exists():
    app.mount("/static", StaticFiles(directory="static"), name="static")
```

### 3. Settings Management (`app/config.py`)
```python
from pydantic import BaseSettings
from typing import List

class Settings(BaseSettings):
    app_name: str = "My API"
    app_version: str = "1.0.0"
    debug: bool = False
    database_url: str = "sqlite:///./app.db"
    secret_key: str = "your-secret-key"
    cors_origins: List[str] = ["http://localhost:3000"]
    
    class Config:
        env_file = ".env"

settings = Settings()
```

### 4. UV Configuration (`pyproject.toml`)
```toml
[project]
name = "my-fastapi-app"
version = "0.1.0"
description = "A modern FastAPI application"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi[standard]>=0.116.0",
    "uvicorn[standard]>=0.30.0",
    "pydantic[email]>=2.0.0",
    "python-multipart>=0.0.20",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
```

## üê≥ Docker Configuration

### Dockerfile with UV
```dockerfile
FROM python:3.11-slim

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Set working directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml uv.lock* ./

# Install dependencies
RUN uv sync --frozen --no-cache

# Copy application code
COPY ./app /app

# Expose port
EXPOSE 8000

# Run the application
CMD ["uv", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### Modern compose.yaml (NO VERSION FIELD)
```yaml
services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/mydb
      - DEBUG=true
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./app:/app
    develop:
      watch:
        - action: sync
          path: ./app
          target: /app

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
```

## üß™ Testing Setup

### Basic Test (`tests/test_main.py`)
```python
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_read_main():
    response = client.get("/")
    assert response.status_code == 200
    assert "message" in response.json()

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "healthy"}
```

### pytest Configuration (`tests/conftest.py`)
```python
import pytest
from fastapi.testclient import TestClient
from app.main import app

@pytest.fixture
def client():
    return TestClient(app)
```

## üì¶ Common Commands

### UV Package Management
```bash
# Initialize project
uv init my-fastapi-app

# Add dependencies
uv add "fastapi[standard]" "uvicorn[standard]"
uv add --dev pytest pytest-asyncio httpx

# Install dependencies
uv sync

# Run application
uv run uvicorn app.main:app --reload

# Run tests
uv run pytest
```

### Development & Docker
```bash
# Start development server
fastapi dev app/main.py

# Build Docker image
docker build -t my-fastapi-app .

# Run with compose
docker compose up --build

# Run tests in container
docker compose run --rm api uv run pytest
```

## ‚ú® Modern FastAPI Best Practices

### 1. Always Use Lifespan Events
```python
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup logic
    yield
    # Shutdown logic

app = FastAPI(lifespan=lifespan)
```

### 2. Dependency Injection Pattern
```python
def get_database():
    # Return database connection
    pass

@app.get("/items/")
async def get_items(db = Depends(get_database)):
    # Use injected database
    pass
```

### 3. Modern Type Annotations
```python
# Use built-in types (Python 3.9+)
def get_items() -> list[Item]:  # Not List[Item]
    pass

def get_item(item_id: int, q: str | None = None):  # Not Union[str, None]
    pass
```

### 4. Proper Error Handling
```python
from fastapi import HTTPException, status

@app.get("/items/{item_id}")
async def get_item(item_id: int):
    if item_id not in items:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Item not found"
        )
    return items[item_id]
```

### 5. Response Models and Status Codes
```python
@app.post("/items/", response_model=Item, status_code=status.HTTP_201_CREATED)
async def create_item(item: ItemCreate):
    return created_item
```

## üéØ Key Configuration Files

- **[pyproject.toml](mdc:pyproject.toml)** - UV dependencies and project metadata
- **[compose.yaml](mdc:compose.yaml)** - Docker Compose services (modern format)
- **[Dockerfile](mdc:Dockerfile)** - Container configuration with UV
- **[.env.example](mdc:.env.example)** - Environment variables template

## üîß Environment Setup

### .env.example
```bash
# Application
APP_NAME="My FastAPI App"
APP_VERSION="1.0.0"
DEBUG=true
SECRET_KEY="your-super-secret-key-here"

# Database
DATABASE_URL="postgresql://user:password@localhost:5432/mydb"

# CORS
CORS_ORIGINS="http://localhost:3000,http://localhost:8080"
```

## üìù File Generation Order

1. Initialize with `uv init`
2. Configure `pyproject.toml` 
3. Create `.env.example` and `.env`
4. Implement `app/config.py`
5. Create `app/models.py`
6. Implement `app/dependencies.py`
7. Create `app/main.py` with lifespan events
8. Add routers in `app/routers/`
9. Create `Dockerfile` with UV
10. Create `compose.yaml` (no version field)
11. Add tests in `tests/`
12. Create `.gitignore`

This FastAPI setup follows modern Python development practices with UV package management and current Docker Compose standards. 